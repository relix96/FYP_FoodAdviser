@page "/search/{mealResult}"
@page "/search/filters"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Components.Web
@using Food_Adviser.Services
@using FoodAdviserModels.Models
@using Newtonsoft.Json
@inject IMealService MealService



@if (meals == null)
{
    <p><em>No meals were found.</em></p>
}
else
{
    <div class="row grid-style">
        @foreach (var meal in meals.recipes)
        {
            <div class="col-lg-3 col-md-6 col-sm-12 col-xs-12">
                <div class="blog-box">
                    <div class="post-media">
                        <a href="food-single.html" title="">
                            <span class="detail veg">Veg</span>
                            <img src=@meal.image alt="" class="img-fluid">
                            <div class="hovereffect"></div>
                        </a>
                        </div><!-- end media -->
                    <div class="blog-meta big-meta">
                        <h4><a href="food-single.html" title="">@meal.title</a></h4>
                        <!--<p>Aenean interdum arcu blandit, vehicula magna non, placerat et pharetratortor.</p>-->
                        <!--<small><a href="food-single.html" title="">18 July, 2017</a></small>-->
                        <small><a href="#" title="">@meal.creditsText</a></small>
                    </div><!-- end meta -->
                    </div><!-- end blog-box -->
                </div>

            <!-- end col -->
        }
    </div>
}

@code {
    [Parameter]
    public Meal meals { get; set; } = new Meal();

    [Parameter]
    public Meal meal { get; set; } = new Meal();

    [Parameter]
    public List<int> ids{ get; set; }

    [Parameter]
    public String id{ get; set; } ="";

    [Parameter]
    public String mealResult{ get; set; } ="";

    [Inject]
    ProtectedSessionStorage sessionStorage{ get; set; }

    protected override async Task OnInitializedAsync() => await GetSearchMealsByName(mealResult);
    private async Task<Meal> GetSearchMealsByName(String mealResult)
    {
        if (mealResult != null)
            return meals = await MealService.GetMealsByName(mealResult);
        else
        {
            await GetStorageSession();
            id = JsonConvert.SerializeObject(ids);
            meals = await MealService.GetMealsById(id);
            return meals;
        }
    }

    private async Task GetStorageSession()
    {
        ProtectedBrowserStorageResult<List<int>> result = await sessionStorage.GetAsync<List<int>>("meals");
        if (result.Success)
        {
            ids = result.Value;
            sessionStorage.DeleteAsync("meals");
        }
    }

}
