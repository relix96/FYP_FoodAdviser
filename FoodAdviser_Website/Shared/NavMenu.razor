@using FoodAdviserModels.Models

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Food Adviser</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
    </nav>
</div>

@*@foreach(var filter in Filters)
{
    <SfDropDownButton Content="@navFilter" ><!--check name for dropdown filter-->
        <DropDownMenuItems>
            @foreach(var x in filter)
            {

                 <DropDownMenuItem Text="@x"></DropDownMenuItem>
            }

           
            <DropDownMenuItem Text="Edit"></DropDownMenuItem>
            
        </DropDownMenuItems>
    </SfDropDownButton>
}*@
<div>
Diet
<SfMultiSelect Mode="VisualMode.CheckBox" TValue="string[]" TItem="TypeFilter" Placeholder="Select a Diet" PopupHeight="450px" PopupWidth="250" DataSource="@Diet">
    <MultiSelectFieldSettings Value="ID" Text="Name"></MultiSelectFieldSettings>

</SfMultiSelect>
</div>
<div>
    Dish
<SfMultiSelect Mode="VisualMode.CheckBox" Placeholder="Select a type of Dish" TValue="string[]" TItem="TypeFilter" DataSource="@Dish">
    <MultiSelectFieldSettings Value="ID" Text="Name"></MultiSelectFieldSettings>

</SfMultiSelect>
</div>

<div>
    Cuisine
<SfMultiSelect Mode="VisualMode.CheckBox" Placeholder="Select a Cuisine" TValue="string[]" TItem="TypeFilter" DataSource="@Cuisine">
    <MultiSelectFieldSettings Value="ID" Text="Name"></MultiSelectFieldSettings>

</SfMultiSelect>
</div>

<div>
    Intolerance
<SfMultiSelect Mode="VisualMode.CheckBox" TValue="string[]" Placeholder="Select a Intolerance" TItem="TypeFilter" DataSource="@Intolerance">
    <MultiSelectFieldSettings Value="ID" Text="Name"></MultiSelectFieldSettings>

</SfMultiSelect>
</div>




@code {
    public string navFilter = "Diet";

    [Parameter]
    public List<TypeFilter> Diet{ get;set;} = new List<TypeFilter>();

    [Parameter]
    public List<TypeFilter> Intolerance{ get;set;} = new List<TypeFilter>();

    [Parameter]
    public List<TypeFilter> Cuisine{ get;set;} = new List<TypeFilter>();

    [Parameter]
    public List<TypeFilter> Dish{ get;set;} = new List<TypeFilter>();

    List<List<TypeFilter>> Filters = new List<List<TypeFilter>>();

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        GetFilters();
    }

    protected override async Task OnParametersSetAsync() => await GetFilters();

    private async Task<List<List<TypeFilter>>> GetFilters()
    {

        Diet = getValues(typeof(Filter.Diet));
        Intolerance = getValues(typeof(Filter.Intolerance));
        Cuisine = getValues(typeof(Filter.Cuisine));
        Dish = getValues(typeof(Filter.Dish));
        Filters.Add(Diet);
        Filters.Add(Intolerance);
        Filters.Add(Cuisine);
        Filters.Add(Dish);
        return Filters;
    }

    private List<TypeFilter> getValues(Type num)
    { 
        List<TypeFilter> typeFilters = new List<TypeFilter>();

        foreach(int d in Enum.GetValues(num))
        {
            TypeFilter tf = new TypeFilter();
            tf.ID=d;
            tf.Name = Enum.GetName((num),d);
            typeFilters.Add(tf);
        }
        
        return typeFilters;
    }

    
    



}
